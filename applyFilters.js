const applyFilters={filter:[],addFilter:function(t,e,i=0){try{if("string"!=typeof t||""===t)throw"unexpected usage of addFilter - filterName is undefined";void 0===this.filter[t]&&(this.filter[t]=[]),i||"number"==typeof i||0===(i=this.filter[t].length)&&i++,void 0!==this.filter[t][i]&&i++,this.filter[t][i]=[],this.filter[t][i]=e}catch(t){console.warn(t)}},doFilter:async function(t,e,i=null){const r=this;try{if("string"!=typeof t||""===t)throw"unexpected usage of doFilter - filterName is undefined";if("string"!=typeof t||""===t)return"filterName is empty";const n=void 0!==this.filter[t]?this.filter[t]:null;if(n){const t=r.asyncForEach(n,e,i);return Promise.all(t).then(t=>t[t.length-1],t=>{console.log(t)})}return e}catch(t){console.error(t)}},asyncForEach:function(t,e,i=null){const r=[],n=Object.keys(t);for(let s=0;s<n.length;s++){const l=parseInt(n[s]);void 0!==t[l]?r.push(new Promise((r,n)=>{(0,t[l])(r,e,i)})):r.push(new Promise((t,r)=>{t(e,i)}))}return r},getFilter:function(t=""){return void 0!==this.filter[t]?this.filter[t]:this.filter}};module.exports=applyFilters;
